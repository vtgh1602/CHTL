-- Employee table
CREATE TABLE Employee (
    employeeId NVARCHAR(20) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address NVARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    hireDate DATE NOT NULL,
    status BIT DEFAULT 1,
    CONSTRAINT chk_employee_email CHECK (email LIKE '%@%.%')
);

-- Manager table inheriting from Employee
CREATE TABLE Manager (
    managerId NVARCHAR(20) PRIMARY KEY,
    department NVARCHAR(50) NOT NULL,
    FOREIGN KEY (managerId) REFERENCES Employee(employeeId)
);

-- SellEmployee table inheriting from Employee
CREATE TABLE SellEmployee (
    sellEmployeeId NVARCHAR(20) PRIMARY KEY,
    salesTarget DECIMAL(15,2) DEFAULT 0,
    commission DECIMAL(5,2) DEFAULT 0,
    FOREIGN KEY (sellEmployeeId) REFERENCES Employee(employeeId),
    CONSTRAINT chk_commission CHECK (commission >= 0 AND commission <= 100)
);

-- Account table
CREATE TABLE Account (
    accountId NVARCHAR(20) PRIMARY KEY,
    employeeId NVARCHAR(20) UNIQUE,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL,
    lastLogin DATETIME,
    status BIT DEFAULT 1,
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
);

-- Category table
CREATE TABLE Category (
    categoryId NVARCHAR(20) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    description NVARCHAR(255),
    parentCategoryId NVARCHAR(20),
    FOREIGN KEY (parentCategoryId) REFERENCES Category(categoryId)
);

-- Product table
CREATE TABLE Product (
    productId NVARCHAR(20) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    categoryId NVARCHAR(20) NOT NULL,
    price DECIMAL(15,2) NOT NULL,
    status BIT DEFAULT 1,
    FOREIGN KEY (categoryId) REFERENCES Category(categoryId),
    CONSTRAINT chk_price CHECK (price >= 0)
);

-- ProductDetail table
CREATE TABLE ProductDetail (
    productDetailId NVARCHAR(20) PRIMARY KEY,
    productId NVARCHAR(20) NOT NULL,
    size NVARCHAR(20),
    color NVARCHAR(30),
    quantity INT NOT NULL DEFAULT 0,
    location NVARCHAR(50),
    FOREIGN KEY (productId) REFERENCES Product(productId),
    CONSTRAINT chk_quantity CHECK (quantity >= 0)
);

-- Customer table
CREATE TABLE Customer (
    customerId NVARCHAR(20) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address NVARCHAR(255),
    email VARCHAR(100),
    membershipLevel VARCHAR(20) DEFAULT 'Regular',
    CONSTRAINT chk_customer_email CHECK (email LIKE '%@%.%')
);

-- Supplier table
CREATE TABLE Supplier (
    supplierId NVARCHAR(20) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address NVARCHAR(255) NOT NULL,
    email VARCHAR(100),
    status BIT DEFAULT 1,
    CONSTRAINT chk_supplier_email CHECK (email LIKE '%@%.%')
);

-- Note table (base table for receipt and delivery notes)
CREATE TABLE Note (
    noteId NVARCHAR(20) PRIMARY KEY,
    createDate DATETIME DEFAULT GETDATE(),
    status VARCHAR(20) NOT NULL,
    employeeId NVARCHAR(20) NOT NULL,
    description NVARCHAR(255),
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
);

-- GoodsReceiptNote table
CREATE TABLE GoodsReceiptNote (
    receiptId NVARCHAR(20) PRIMARY KEY,
    supplierId NVARCHAR(20) NOT NULL,
    totalAmount DECIMAL(15,2) NOT NULL,
    FOREIGN KEY (receiptId) REFERENCES Note(noteId),
    FOREIGN KEY (supplierId) REFERENCES Supplier(supplierId),
    CONSTRAINT chk_receipt_amount CHECK (totalAmount >= 0)
);

-- GoodsDeliveryNote table
CREATE TABLE GoodsDeliveryNote (
    deliveryId NVARCHAR(20) PRIMARY KEY,
    customerId NVARCHAR(20) NOT NULL,
    deliveryDate DATETIME NOT NULL,
    FOREIGN KEY (deliveryId) REFERENCES Note(noteId),
    FOREIGN KEY (customerId) REFERENCES Customer(customerId)
);

-- ProductNote table (for both receipt and delivery notes)
CREATE TABLE ProductNote (
    productId NVARCHAR(20),
    noteId NVARCHAR(20),
    quantity INT NOT NULL,
    price DECIMAL(15,2) NOT NULL,
    PRIMARY KEY (productId, noteId),
    FOREIGN KEY (productId) REFERENCES Product(productId),
    FOREIGN KEY (noteId) REFERENCES Note(noteId),
    CONSTRAINT chk_product_note_quantity CHECK (quantity > 0),
    CONSTRAINT chk_product_note_price CHECK (price >= 0)
);

-- Bill table
CREATE TABLE Bill (
    billId NVARCHAR(20) PRIMARY KEY,
    customerId NVARCHAR(20) NOT NULL,
    employeeId NVARCHAR(20) NOT NULL,
    createDate DATETIME DEFAULT GETDATE(),
    totalAmount DECIMAL(15,2) DEFAULT 0,
    status VARCHAR(20) DEFAULT 'Pending',
    FOREIGN KEY (customerId) REFERENCES Customer(customerId),
    FOREIGN KEY (employeeId) REFERENCES SellEmployee(sellEmployeeId),
    CONSTRAINT chk_bill_amount CHECK (totalAmount >= 0)
);

-- BillDetail table
CREATE TABLE BillDetail (
    billDetailId NVARCHAR(20) PRIMARY KEY,
    billId NVARCHAR(20) NOT NULL,
    productId NVARCHAR(20) NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(15,2) NOT NULL,
    FOREIGN KEY (billId) REFERENCES Bill(billId),
    FOREIGN KEY (productId) REFERENCES Product(productId),
    CONSTRAINT chk_bill_detail_quantity CHECK (quantity > 0),
    CONSTRAINT chk_bill_detail_price CHECK (price >= 0)
);

-- Shift table
CREATE TABLE Shift (
    shiftId NVARCHAR(20) PRIMARY KEY,
    startTime DATETIME NOT NULL,
    endTime DATETIME,
    status VARCHAR(20) DEFAULT 'Active',
    CONSTRAINT chk_shift_times CHECK (endTime IS NULL OR endTime > startTime)
);

-- ShiftNotes table
CREATE TABLE ShiftNotes (
    shiftNoteId NVARCHAR(20) PRIMARY KEY,
    shiftId NVARCHAR(20) NOT NULL,
    employeeId NVARCHAR(20) NOT NULL,
    note NVARCHAR(MAX) NOT NULL,
    timestamp DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (shiftId) REFERENCES Shift(shiftId),
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
)
